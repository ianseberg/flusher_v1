#include <ArduinoWiFiServer.h>
#include <BearSSLHelpers.h>
#include <CertStoreBearSSL.h>
#include <ESP8266WiFi.h>
#include <ESP8266WiFiAP.h>
#include <ESP8266WiFiGeneric.h>
#include <ESP8266WiFiGratuitous.h>
#include <ESP8266WiFiMulti.h>
#include <ESP8266WiFiSTA.h>
#include <ESP8266WiFiScan.h>
#include <ESP8266WiFiType.h>
#include <WiFiClient.h>
#include <WiFiClientSecure.h>
#include <WiFiClientSecureBearSSL.h>
#include <WiFiServer.h>
#include <WiFiServerSecure.h>
#include <WiFiServerSecureBearSSL.h>
#include <WiFiUdp.h>
#include <Servo.h>

// WiFi settings
const char* ssid = "DOVECAZZOEILMIOPACCO";
const char* password = "12345678";
const IPAddress staticIP(192, 168, 8, 80); // set your desired static IP address here
const IPAddress gateway(192, 168, 8, 1);    // set your network gateway here
const IPAddress subnet(255, 255, 255, 0);   // set your network subnet mask here

// IFTTT settings
const char* event = "flush";
const char* key = "hDIJocjjkU_3TWfUmmEu2Hvij93P0K10Kl6RbOnbSOZ";
const char* server = "maker.ifttt.com";
const int httpsPort = 443;

// Servo settings
Servo toiletFlush;
const int servoPin = D8; // Replace with the actual pin number connected to the servo

// Button settings
const int buttonPin = D1; // Replace with the actual pin number connected to the button
const int buttonDelay = 50; // Debounce delay in ms
bool lastButtonState = LOW;
bool buttonState = LOW;
unsigned long lastDebounceTime = 0;

// Function declarations
void setupWiFi();
void setupServo();
void triggerIFTTT();
void triggerFlush();

void setup() {
  Serial.begin(115200);
  setupWiFi();
  setupServo();
  pinMode(buttonPin, INPUT_PULLUP); // Set button pin as input with pull-up resistor
}

void loop() {
  buttonState = digitalRead(buttonPin);
  if (buttonState != lastButtonState && (millis() - lastDebounceTime) > buttonDelay) {
    if (buttonState == HIGH) {
      triggerFlush();
    }
    lastDebounceTime = millis();
  }
  lastButtonState = buttonState;
}

void setupWiFi() {
  WiFi.mode(WIFI_STA);
  WiFi.config(staticIP, gateway, subnet);
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("Connected!");
}

void setupServo() {
  toiletFlush.attach(servoPin);
}

void triggerIFTTT() {
  WiFiClientSecure client;
  if (!client.connect(server, httpsPort)) {
    Serial.println("Connection failed");
    return;
  }
  String url = "/trigger/" + String(event) + "/json/with/key/" + String(key);
  String payload = String("{\"value1\":\"") + String(WiFi.localIP().toString()) + String("\"}");
  client.println(String("POST ") + url + " HTTP/1.1");
  client.println(String("Host: ") + server);
  client.println("Content-Type: application/json");
  client.print("Content-Length: ");
  client.println(payload.length());
  client.println();
  client.println(payload);
  delay(1000); // Wait for response
  while (client.available()) {
    Serial.write(client.read());
  }
  Serial.println("IFTTT webhook triggered!");
}

void triggerFlush() {
  toiletFlush.write(0); // Move the servo to the flush position
  delay(1000); // Wait for 1 second
  toiletFlush.write(180); // Move the servo back to the starting position
  Serial.println("Flush triggered!");
}
